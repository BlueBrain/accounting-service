[project]
name = "accounting-service"
version = "0.0.0"
description = "Accounting Service"
authors = [
    {name = "Blue Brain Project, EPFL"},
    {name = "Gianluca Ficarelli", email = "gianluca.ficarelli@epfl.ch"},
]
dependencies = [
    "aiobotocore",
    "alembic",
    "asyncpg",
    "botocore",
    "fastapi",
    "pydantic>=2",
    "pydantic-settings>=2.2.1",
    "sqlalchemy",
    "uvicorn[standard]",
]
requires-python = "==3.12.*"
readme = "README.md"
license = {text = "Apache-2.0"}

[tool.pdm]
distribution = false

[tool.pdm.dev-dependencies]
dev = [
    "httpx",
    "pytest",
    "pytest-cov",
    "coverage[toml]",
    "mypy",
    "ruff",
    "types-PyYAML",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "COM812",  # Trailing comma (to have similar behavior to black)
    "CPY001",  # Missing copyright notice at top of file
    "ISC001",  # single line implicit string concatenation (disabling suggested by ruff formatter)
    "N802",    # function name should be lowercase
    "RUF029",  # Function is declared `async`, but doesn't `await` or use `async` features.
    "S104",    # Possible binding to all interfaces
]

[tool.ruff.lint.isort]
known-local-folder = ["tests"]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"alembic/*.py" = [
    "D",       # pydocstyle
    "ERA001",  # Found commented-out code
    "INP001",  # Missing `__init__.py`
    "S101",    # Use of `assert` detected
]
"tests/*.py" = [
    "ANN",     # Missing type annotation
    "D",       # pydocstyle
    "ERA001",  # Found commented-out code
    "INP001",  # Missing `__init__.py`
    "PLR2004", # magic value (constant) used in comparison (i.e. expected == 3)
    "S101",    # Use of `assert` detected
    "SLF001",  # private member access
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
# Maximum number of arguments for function / method
max-args = 10
# Maximum number of locals for function / method body
max-locals = 15
# Maximum number of return / yield for function / method body
max-returns = 6
# Maximum number of branch for function / method body
max-branches = 12
# Maximum number of statements in function / method body
max-statements = 50
# Maximum number of public methods for a class (see R0904).
max-public-methods = 60


[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]

[tool.coverage.run]
branch = true
parallel = false
source_pkgs = [
    "app",
]

[tool.coverage.report]
show_missing = true
precision = 0
fail_under = 85
omit = [
    "__main__.py",
]

[tool.mypy]
show_error_codes = true
ignore_missing_imports = true
allow_redefinition = true

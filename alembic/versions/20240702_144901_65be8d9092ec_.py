"""empty message

Revision ID: 65be8d9092ec
Revises:
Create Date: 2024-07-02 14:49:01.728971

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "65be8d9092ec"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "TOPUP",
        "ASSIGN",
        "RESERVE",
        "RELEASE",
        "CHARGE_SHORT_JOBS",
        "CHARGE_LONG_JOBS",
        "CHARGE_STORAGE",
        name="transactiontype",
    ).create(op.get_bind())
    sa.Enum("SYS", "VLAB", "PROJ", "RSV", name="accounttype").create(op.get_bind())
    sa.Enum("STORAGE", "SHORT_JOBS", "LONG_JOBS", name="servicetype").create(op.get_bind())
    sa.Enum("COMPLETED", "FAILED", name="eventstatus").create(op.get_bind())
    op.create_table(
        "account",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "account_type",
            postgresql.ENUM("SYS", "VLAB", "PROJ", "RSV", name="accounttype", create_type=False),
            nullable=False,
        ),
        sa.Column("parent_id", sa.Uuid(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["account.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_account_created_at"), "account", ["created_at"], unique=False)
    op.create_table(
        "event",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column("message_id", sa.Uuid(), nullable=False),
        sa.Column("queue_name", sa.String(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("COMPLETED", "FAILED", name="eventstatus", create_type=False),
            nullable=False,
        ),
        sa.Column("attributes", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("body", sa.String(), nullable=True),
        sa.Column("error", sa.String(), nullable=True),
        sa.Column("result_id", sa.Integer(), nullable=True),
        sa.Column("counter", sa.SmallInteger(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_event_created_at"), "event", ["created_at"], unique=False)
    op.create_index(op.f("ix_event_message_id"), "event", ["message_id"], unique=True)
    op.create_table(
        "usage",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column("vlab_id", sa.Uuid(), nullable=False),
        sa.Column("proj_id", sa.Uuid(), nullable=False),
        sa.Column("job_id", sa.Uuid(), nullable=True),
        sa.Column(
            "service_type",
            postgresql.ENUM(
                "STORAGE", "SHORT_JOBS", "LONG_JOBS", name="servicetype", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("service_subtype", sa.String(), nullable=True),
        sa.Column("units", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_alive_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("finished_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_usage_created_at"), "usage", ["created_at"], unique=False)
    op.create_index(op.f("ix_usage_job_id"), "usage", ["job_id"], unique=False)
    op.create_index(op.f("ix_usage_proj_id"), "usage", ["proj_id"], unique=False)
    op.create_index(op.f("ix_usage_vlab_id"), "usage", ["vlab_id"], unique=False)
    op.create_table(
        "journal",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column("transaction_date", sa.Date(), nullable=False),
        sa.Column(
            "transaction_type",
            postgresql.ENUM(
                "TOPUP",
                "ASSIGN",
                "RESERVE",
                "RELEASE",
                "CHARGE_SHORT_JOBS",
                "CHARGE_LONG_JOBS",
                "CHARGE_STORAGE",
                name="transactiontype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("usage_id", sa.BigInteger(), nullable=True),
        sa.Column("properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["usage_id"],
            ["usage.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_journal_created_at"), "journal", ["created_at"], unique=False)
    op.create_table(
        "ledger",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("journal_id", sa.BigInteger(), nullable=False),
        sa.Column("amount", sa.Numeric(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["account.id"],
        ),
        sa.ForeignKeyConstraint(
            ["journal_id"],
            ["journal.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_ledger_created_at"), "ledger", ["created_at"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_ledger_created_at"), table_name="ledger")
    op.drop_table("ledger")
    op.drop_index(op.f("ix_journal_created_at"), table_name="journal")
    op.drop_table("journal")
    op.drop_index(op.f("ix_usage_vlab_id"), table_name="usage")
    op.drop_index(op.f("ix_usage_proj_id"), table_name="usage")
    op.drop_index(op.f("ix_usage_job_id"), table_name="usage")
    op.drop_index(op.f("ix_usage_created_at"), table_name="usage")
    op.drop_table("usage")
    op.drop_index(op.f("ix_event_message_id"), table_name="event")
    op.drop_index(op.f("ix_event_created_at"), table_name="event")
    op.drop_table("event")
    op.drop_index(op.f("ix_account_created_at"), table_name="account")
    op.drop_table("account")
    sa.Enum("COMPLETED", "FAILED", name="eventstatus").drop(op.get_bind())
    sa.Enum("STORAGE", "SHORT_JOBS", "LONG_JOBS", name="servicetype").drop(op.get_bind())
    sa.Enum("SYS", "VLAB", "PROJ", "RSV", name="accounttype").drop(op.get_bind())
    sa.Enum(
        "TOPUP",
        "ASSIGN",
        "RESERVE",
        "RELEASE",
        "CHARGE_SHORT_JOBS",
        "CHARGE_LONG_JOBS",
        "CHARGE_STORAGE",
        name="transactiontype",
    ).drop(op.get_bind())
    # ### end Alembic commands ###

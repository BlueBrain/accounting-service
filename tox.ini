[base]
name = accounting-service
path = src/app
pip_compile = python -m piptools compile --allow-unsafe --strip-extras --no-emit-index-url -o requirements.txt pyproject.toml
pip_compile_check = diff <(cat requirements.txt|grep -vE "^ *\#") <({[base]pip_compile} --dry-run 2>&1|grep -v Dry-run|grep -vE "^ *\#")
black = black~=24.1

[tox]
minversion = 4
isolated_build = true
ignore_basepython_conflict = true

[testenv]
description = Run tests
basepython=python3.12
setenv =
    LOGGING_LEVEL = DEBUG
    DEBUG = true
skip_install = true
deps =
    -r requirements.txt
    httpx
    pytest
    pytest-cov[all]
    coverage[toml]
commands =
    python -m pytest -vv --cov=app tests/ {posargs}
    coverage xml
    coverage html

[testenv:coverage]
description = Run tests and coverage

[testenv:check-packaging]
description = Check that the package can be built
deps =
    wheel
    twine
    build
commands_pre =
    rm -Rf {envtmpdir}/dist
commands =
    python -m build --outdir {envtmpdir}/dist
    twine check {envtmpdir}/dist/*
allowlist_externals = rm

[testenv:lint]
description = Check linting
deps =
    -r requirements.txt
    ruff
    isort
    mypy
    types-cachetools
    types-requests
    types-PyYAML
    pip-tools
    {[base]black}
commands =
    isort --check-only --diff {[base]path}
    black --check .
    ruff check {[base]path}
    mypy --show-error-codes --ignore-missing-imports --allow-redefinition {[base]path}
    bash -c '{[base]pip_compile_check}'
allowlist_externals = bash

[testenv:format]
description = Format the code
deps =
    pyupgrade
    autoflake
    isort
    {[base]black}
commands =
    find {[base]path} -type f -name '*.py' -exec pyupgrade --py312-plus {} ;
    autoflake -ir --remove-all-unused-imports --ignore-init-module-imports {[base]path}
    isort {[base]path}
    black .
allowlist_externals = find

[testenv:compile-requirements]
description = Create or update requirements.txt, without upgrading the version of the dependencies
deps = pip-tools
commands = {[base]pip_compile}

[testenv:upgrade-requirements]
description = Create or update requirements.txt, using the latest version of the dependencies
deps = pip-tools
commands = {[base]pip_compile} --upgrade

[testenv:check-requirements]
description = Check that the dependencies in the existing requirements.txt are valid
deps = pip-tools
commands = bash -c '{[base]pip_compile_check}'
allowlist_externals = bash

[testenv:build-image]
description = Build a local docker image
deps = setuptools_scm
commands =
    bash -c '\
    docker compose --progress=plain build \
    --build-arg APP_NAME={[base]name}:local \
    --build-arg APP_VERSION=$(python -m setuptools_scm) \
    --build-arg COMMIT_SHA=$(git rev-parse HEAD) \
    --build-arg INSTALL_DEBUG_TOOLS=true'
allowlist_externals = bash

[testenv:run-image]
description = Run a local docker image previously built
deps =
depends =
    build-image
commands = docker compose --progress=tty up --watch
allowlist_externals = docker

[testenv:logs-image]
description = Tail the logs of a local docker container
deps =
commands = - docker compose --progress=tty logs --follow
allowlist_externals = docker
